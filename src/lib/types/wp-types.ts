import type { EditorBlock } from '$lib/graphql/generated'

export type NonEmptyArray<T> = [T, ...T[]]

// Block attributes interface that covers all possible attributes from different block types
export interface BlockAttributes {
  // Common attributes
  align?: string
  className?: string
  cssClassName?: string
  backgroundColor?: string
  style?: string | any // Can be string or parsed JSON object
  
  // Text-related attributes
  content?: string
  fontFamily?: string
  fontSize?: string
  textColor?: string
  textAlign?: string
  level?: number
  
  // Layout attributes
  layout?: string | any // Can be string or parsed JSON object
  verticalAlignment?: string
  isStackedOnMobile?: boolean
  
  // Image attributes
  alt?: string
  aspectRatio?: string
  borderColor?: string
  caption?: string
  sizeSlug?: string
  src?: string
  
  // Video attributes
  autoplay?: boolean
  controls?: boolean
  loop?: boolean
  muted?: boolean
  playsInline?: boolean
  preload?: string
  
  // Button attributes
  gradient?: string
  metadata?: any
  rel?: string
  type?: string
  linkTarget?: string
  text?: string
  url?: string
  
  // Spacer attributes
  height?: string
  
  // Service push attributes
  alignment?: string // Note: some blocks use 'alignment' instead of 'align'
  
  // Any other attributes that might be added
  [key: string]: any
}

// Extended EditorBlock type that includes attributes and children
export type ExtendedEditorBlock = EditorBlock & {
  attributes?: BlockAttributes
  children?: ExtendedEditorBlock[]
  // Allow index access for dynamic property access
  [key: string]: any
}

// Generic utility type to add children property to any block type
// This allows using generated types while supporting hierarchical structure
export type WithChildren<T> = T & {
  children?: EditorBlock[]
}

// Utility types for working with hierarchical blocks
export interface HierarchicalOptions {
  idKey?: string
  parentKey?: string
  childrenKey?: string
}

// API Response types that aren't generated by GraphQL
export interface LayoutAPIResponse {
  menu: Menu
  nodeByUri: {
    seo: SEO
  }
  uri: string
}

export interface Menu {
  menuItems: {
    nodes: MenuItem[]
  }
}

export interface SEO {
  metaDesc: string
  metaKeywords: string
  opengraphSiteName: string
  opengraphTitle: string
  opengraphPublisher: string
  opengraphUrl: string
  title: string
  twitterDescription: string
  twitterTitle: string
  twitterImage: ImageObject | null
  opengraphImage: ImageObject | null
  breadcrumbs?: BreadcrumbItem[]
}

export interface BreadcrumbItem {
  text: string
  url?: string
}

export interface HomePageContentResponse {
  page: {
    id: string
    editorBlocks: EditorBlock[]
  }
}

export interface MenuItem {
  label: string
  order: number
  uri: string
  current: boolean
}

// Image and media types that might not be fully covered by generated types
export type ImageSizeName = 'medium' | 'large' | 'thumbnail' | 'medium_large' | '1536x1536' | '2048x2048'

export type ImageSize = {
  name: ImageSizeName
  sourceUrl: string
  width: number
  height: number
}

export type MediaSize = {
  sourceUrl: string
  width: number
  height: number
  name: ImageSizeName
}

export type MediaDetails = {
  sizes: NonEmptyArray<MediaSize>
}

export type PortfolioMedia = {
  altText: string
  mediaDetails: MediaDetails
  mediaType: 'image' | 'file'
  mimeType: string
  mediaItemUrl: string
}

export type ImageObject = {
  altText: string
  caption: string | null
  mediaDetails: MediaDetails
}

// Types for specific content structures
export interface NameAndSlug {
  slug: string
  name: string
  parentId?: string | null
}

export interface ServiceNode {
  slug: string
  id: string
  title: string
  uri: string
  featuredImage: FeaturedImage
}

export interface PortfolioItemNode {
  slug: string
  id: string
  uri: string
  title: string
  excerpt?: string
  projectData: {
    startDate?: string | null
    endDate?: string | null
    imageGallery: {
      nodes: PortfolioMedia[]
    }
  }
  nhtblClients: {
    nodes: NameAndSlug[]
  }
  nhtblServices: {
    nodes: NameAndSlug[]
  }
  content: string
  featuredImage: FeaturedImage
}

export interface FeaturedImage {
  node: ImageObject
}

export interface ProjectsQueryResult {
  nhtblProjects: {
    nodes: PortfolioItemNode[]
  }
}
